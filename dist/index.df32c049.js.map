{"mappings":"AACA,IAAIA,EAAeC,OAAOC,YACtBC,EAAcF,OAAOG,WACzB,MAAMC,EAAiB,IAEjBC,EADoB,IACoBD,EAG9C,IAAIE,EAAY,CACdC,QAAS,EACTC,QAASN,EAAcA,EAAc,EACrCO,QAAS,GAIX,MAAMC,EAAUC,SAASC,uBAAuB,WAAW,GACrDC,EAAUF,SAASG,eAAe,WAClCC,EAAUJ,SAASG,eAAe,WAaxC,SAASE,EAAUC,EAAWC,EAAcC,GAE1Cb,EAAUW,KACNf,EAAcgB,EAAaE,aAAehB,EAAkBe,EAEhED,EAAaG,MAAMC,KAAOhB,EAAUW,GAAa,KAG7CX,EAAUW,IAAcC,EAAaE,cACvCd,EAAUW,GAAaf,EAE3B,CAfAqB,aAkBA,WACEP,EAAU,UAAWN,EAAS,KAC9BM,EAAU,UAAWH,EAAS,MAC9BG,EAAU,UAAWD,EAAS,KAChC,GAtBqBV,GAyBrBmB,iBAAiB,UAAWC,IAC1B1B,EAAeC,OAAOC,YACtBC,EAAcF,OAAOG,UAAU","sources":["src/app.js"],"sourcesContent":["// Configuration and variable initialization.\nlet windowHeight = window.innerHeight;\nlet windowWidth = window.innerWidth;\nconst animationSteps = 600;\nconst animationDuration = 6000;\nconst animationInterval = animationDuration / animationSteps;\n\n// Store the positional data of the clouds.\nlet positions = {\n  clouds1: 0,\n  clouds2: windowWidth - windowWidth / 2,\n  clouds3: 0,\n};\n\n// Get the HTML elements of the clouds.\nconst clouds1 = document.getElementsByClassName(\"clouds1\")[0];\nconst clouds2 = document.getElementById(\"clouds2\");\nconst clouds3 = document.getElementById(\"clouds3\");\n\n// Do the work.\n// TODO - Instead of animating every x miliseconds, move every one or \n// two seconds and add a CSS transition. I actually got this to work,\n// but when the element resets to the right, you see the transition of\n// the cloud rush across the screen to the right after moving slowly to\n// the left. So code needs to be added that removes the element and re-\n// adds it instead.\nsetInterval(animate, animationInterval);\n\n// Moves a given cloud based on the configurations, multiplied by a given\n// coeffecient.\nfunction moveCloud(cloudName, cloudElement, coeffecient) {\n  // Calculate the new position.\n  positions[cloudName] -=\n    ((windowWidth + cloudElement.offsetWidth) / animationSteps) * coeffecient;\n  // Update the element with the new position.\n  cloudElement.style.left = positions[cloudName] + \"px\";\n\n  // If the given element has left the view of the window, set it to the right.\n  if (positions[cloudName] < -cloudElement.offsetWidth) {\n    positions[cloudName] = windowWidth;\n  }\n}\n\n// High-level logic for the main animation frames.\nfunction animate() {\n  moveCloud(\"clouds1\", clouds1, 0.05);\n  moveCloud(\"clouds2\", clouds2, 0.015);\n  moveCloud(\"clouds3\", clouds3, 0.002);\n}\n\n// Readjust window variables if window is resized.\naddEventListener(\"resize\", (event) => {\n  windowHeight = window.innerHeight;\n  windowWidth = window.innerWidth;\n});\n"],"names":["$e73bf42412feb220$var$windowHeight","window","innerHeight","$e73bf42412feb220$var$windowWidth","innerWidth","$e73bf42412feb220$var$animationSteps","$e73bf42412feb220$var$animationInterval","$e73bf42412feb220$var$positions","clouds1","clouds2","clouds3","$e73bf42412feb220$var$clouds1","document","getElementsByClassName","$e73bf42412feb220$var$clouds2","getElementById","$e73bf42412feb220$var$clouds3","$e73bf42412feb220$var$moveCloud","cloudName","cloudElement","coeffecient","offsetWidth","style","left","setInterval","addEventListener","event"],"version":3,"file":"index.df32c049.js.map"}